{"version":3,"sources":["components/statistics/Statistics.module.css","components/feedback/Feedback.module.css","App.module.css","components/sectionTitle/SectionTitle.module.css","components/notification/Notification.module.css","components/sectionTitle/SectionTitle.jsx","components/feedback/Feedback.jsx","components/statistics/Statistics.jsx","components/notification/Notification.jsx","App.jsx","index.js"],"names":["module","exports","SectionTitle","title","children","className","styles","Feedback","options","onLeaveFeedback","feedback_btnList","map","option","randomId","nanoid","feedback_btnList__item","type","feedback_btn","onClick","toUpperCase","Statistics","pervState","total","positive","good","neutral","bad","statistics_text","statistics_data","Notification","message","notification","App","state","feedBackIncrement","evt","feedBack","currentTarget","textContent","toLowerCase","setState","prevState","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","stateKeys","Object","keys","this","container","Component","ReactDOM","render","StrictMode","document","querySelector"],"mappings":"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","file":"static/js/main.0a9f8b2a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"statistics_text\":\"Statistics_statistics_text__3FwQN\",\"statistics_data\":\"Statistics_statistics_data__37or8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"feedback_btnList\":\"Feedback_feedback_btnList__2d256\",\"feedback_btnList__item\":\"Feedback_feedback_btnList__item__vDwDa\",\"feedback_btn\":\"Feedback_feedback_btn__2zqeB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__19lIP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"SectionTitle_title__1NfQF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"notification\":\"Notification_notification__N3UQq\"};","import styles from './SectionTitle.module.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function SectionTitle({ title, children })  {\r\n    return (\r\n        <div>\r\n            <p className={styles.title}>{title}</p>\r\n            {children}\r\n        </div>\r\n    );\r\n};\r\n\r\nSectionTitle.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n}\r\n","import { nanoid } from \"nanoid\";\nimport styles from './Feedback.module.css';\nimport PropTypes from 'prop-types';\n\nexport default function Feedback({ options, onLeaveFeedback })  {\n    \n        return (\n            <ul className={styles.feedback_btnList}>\n                {options.map(option => {\n                    const randomId = nanoid();\n                    return (\n                        <li className={styles.feedback_btnList__item} key={randomId}>\n                            <button type=\"button\" className={styles.feedback_btn} onClick={onLeaveFeedback}>{option.toUpperCase()}</button>\n                        </li>\n                    );\n                })}\n            </ul>\n        );\n};\n\nFeedback.propTypes = {\n    onLeaveFeedback: PropTypes.func.isRequired,\n    options: PropTypes.array.isRequired,\n}","import PropTypes from 'prop-types';\r\nimport styles from './Statistics.module.css';\r\n\r\nexport default function Statistics({ pervState, total, positive }) {\r\n    const { good, neutral, bad } = pervState;\r\n    return (\r\n        <div>\r\n            <p className={styles.statistics_text}>Good: <span className={styles.statistics_data}>{good}</span></p>\r\n            <p className={styles.statistics_text}>Neutral: <span className={styles.statistics_data}>{neutral}</span></p>\r\n            <p className={styles.statistics_text}>Bad: <span className={styles.statistics_data}>{bad}</span></p>\r\n            <p className={styles.statistics_text}>Total: <span className={styles.statistics_data}>{total}</span></p>\r\n            <p className={styles.statistics_text}>Positive feedback: <span className={styles.statistics_data}>{positive}%</span></p>\r\n        </div>\r\n    );\r\n}\r\n\r\nStatistics.propTypes = {\r\n    pervState: PropTypes.object.isRequired,\r\n    total: PropTypes.number.isRequired,\r\n    positive: PropTypes.number.isRequired,\r\n}","import styles from './Notification.module.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function Notification({ message })  {\r\n    return (\r\n        <p className={styles.notification}>{message}</p>\r\n    );\r\n};\r\n\r\nNotification.propTypes = {\r\n    message: PropTypes.string.isRequired,\r\n}","import React, { Component } from 'react';\nimport styles from './App.module.css';\nimport SectionTitle from './components/sectionTitle/SectionTitle.jsx';\nimport Feedback from './components/feedback/Feedback.jsx';\nimport Statistics from './components/statistics/Statistics.jsx';\nimport Notification from './components/notification/Notification.jsx';\n\nclass App extends Component {\n    state = {\n        good: 0,\n        neutral: 0,\n        bad: 0\n    }\n\n    feedBackIncrement = (evt) => {\n        const feedBack = evt.currentTarget.textContent.toLowerCase();\n        this.setState((prevState) => {\n            return {\n                [feedBack]: prevState[feedBack] + 1,\n            }\n        });\n    };\n\n    countTotalFeedback = () => {\n        return (this.state.good + this.state.neutral + this.state.bad);\n    };\n\n    countPositiveFeedbackPercentage = () => {\n        return Math.round((this.state.good * 100 / (this.state.good + this.state.neutral + this.state.bad)));\n    };\n    \n    render() {\n        const stateKeys = Object.keys(this.state);\n        const { good, neutral, bad } = this.state;\n        return (\n            <div className={styles.container}>\n                <SectionTitle title=\"Please leave feedback\">\n                    <Feedback\n                        options={stateKeys}\n                        onLeaveFeedback={this.feedBackIncrement}\n                    />\n                </SectionTitle>\n                <SectionTitle title=\"Statistics\">\n                    {(good || neutral || bad) ? (\n                    <Statistics\n                        pervState={this.state}\n                        total={this.countTotalFeedback()}\n                        positive={this.countPositiveFeedbackPercentage()}\n                    />\n                    ) : <Notification message=\"No feedback given\"/>}\n                </SectionTitle>\n            </div>\n        );\n    };\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App.jsx';\nimport './index.css';\n// import 'modern-normalize/modern-normalize.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.querySelector('#root')\n);\n"],"sourceRoot":""}